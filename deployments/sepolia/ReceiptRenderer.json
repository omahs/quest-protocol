{
  "address": "0xD574fAE75dEDbbB6697077BB39186B12BA384895",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "questId_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardAddress_",
          "type": "address"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardAddress_",
          "type": "address"
        }
      ],
      "name": "humanRewardAmount",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        }
      ],
      "name": "symbolForAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8de84e5ebaf9fce8f46656f45910828164ffc3a91cea2a9ccbac5bc8802feb9a",
  "receipt": {
    "to": null,
    "from": "0x017F8Ad14A2E745ea0F756Bd57CD4852400be78c",
    "contractAddress": "0xD574fAE75dEDbbB6697077BB39186B12BA384895",
    "transactionIndex": 26,
    "gasUsed": "4820317",
    "logsBloom": "0x
    "blockHash": "0x6e13b25a1002111b8a9548a698af6c9b043dfe319f3d875499e425855cb3caf7",
    "transactionHash": "0x8de84e5ebaf9fce8f46656f45910828164ffc3a91cea2a9ccbac5bc8802feb9a",
    "logs": [],
    "blockNumber": 3285267,
    "cumulativeGasUsed": "7530778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c8adf721c36c1029371a44d89d5816e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"questId_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardAddress_\",\"type\":\"address\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardAddress_\",\"type\":\"address\"}],\"name\":\"humanRewardAmount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"symbolForAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"RabbitHole.gg\",\"details\":\"This contract is used to render on-chain data for RabbitHole Receipts (ERC-721 standard)\",\"kind\":\"dev\",\"methods\":{\"generateTokenURI(uint256,string,uint256,bool,uint256,address)\":{\"details\":\"generates the tokenURI for a given ERC-721 token ID\",\"params\":{\"claimed_\":\"Whether or not the token has been claimed\",\"questId_\":\"The questId tied to the tokenId\",\"rewardAddress_\":\"The address of the reward token\",\"rewardAmount_\":\"The amount of reward tokens that the user is eligible for\",\"tokenId_\":\"The token id to generate the URI for\",\"totalParticipants_\":\"The total number of participants in the quest\"},\"returns\":{\"_0\":\"encoded JSON following the generic OpenSea metadata standard\"}},\"humanRewardAmount(uint256,address)\":{\"details\":\"Returns a human readable reward amount\",\"params\":{\"rewardAddress_\":\"The reward address\",\"rewardAmount_\":\"The reward amount\"}},\"symbolForAddress(address)\":{\"details\":\"Returns the symbol for a token address\",\"params\":{\"tokenAddress_\":\"The reward address\"}}},\"title\":\"ReceiptRenderer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReceiptRenderer.sol\":\"ReceiptRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ReceiptRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/// @title ReceiptRenderer\\n/// @author RabbitHole.gg\\n/// @dev This contract is used to render on-chain data for RabbitHole Receipts (ERC-721 standard)\\ncontract ReceiptRenderer {\\n    using Strings for uint256;\\n    string private constant GREEN_SVG = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"623\\\" height=\\\"848\\\"><defs><radialGradient id=\\\"A\\\" cx=\\\"18.03\\\" cy=\\\"-23.85\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(-750 4.01 -3.89 -727.99 13738.75 -17063.51)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\".01\\\" stop-color=\\\"#6aff67\\\" stop-opacity=\\\".39\\\"/><stop offset=\\\".14\\\" stop-color=\\\"#59ff3e\\\" stop-opacity=\\\".22\\\"/><stop offset=\\\".3\\\" stop-color=\\\"#4ad433\\\" stop-opacity=\\\".52\\\"/><stop offset=\\\".4\\\" stop-color=\\\"#3eb42b\\\" stop-opacity=\\\"0\\\"/><stop offset=\\\"1\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"B\\\" cx=\\\"17.91\\\" cy=\\\"-23.86\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(8,333,-579.59,13.92,-13669.05,-5581.04)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0\\\" stop-color=\\\"#59ff3e\\\" stop-opacity=\\\".35\\\"/><stop offset=\\\"1\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient xlink:href=\\\"#B\\\" id=\\\"C\\\" cx=\\\"18.09\\\" cy=\\\"-23.91\\\" gradientTransform=\\\"matrix(0,-345,877.77,0,21305.27,7045.5)\\\"/><radialGradient xlink:href=\\\"#B\\\" id=\\\"D\\\" cx=\\\"17.93\\\" cy=\\\"-23.91\\\" gradientTransform=\\\"matrix(268,-2,8.57,1148.65,-4548.99,27879.6)\\\"/><radialGradient id=\\\"E\\\" cx=\\\"18.07\\\" cy=\\\"-23.87\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(-242,0,0,-1277.43,4934.5,-30115.86)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0\\\" stop-color=\\\"#59ff3e\\\" stop-opacity=\\\".42\\\"/><stop offset=\\\"1\\\" stop-opacity=\\\"0\\\"/></radialGradient><path id=\\\"F\\\" d=\\\"M399.6 66H225.4A22 22 0 0 1 204 83h-39a22 22 0 0 1-21.4-17h-44L66 99.6V781h453.5l36.5-36.5v-641L518.5 66h-37.1A22 22 0 0 1 460 83h-39a22 22 0 0 1-21.4-17Z\\\"/></defs><path d=\\\"M.5.5h622v847H.5z\\\" stroke=\\\"#000\\\" stroke-miterlimit=\\\"10\\\"/><path d=\\\"M400.1 66.5H225.9a22 22 0 0 1-21.4 17h-39a22 22 0 0 1-21.4-17h-44l-33.6 33.6v681.4H520l36.5-36.5V104L519 66.5h-37.1a22 22 0 0 1-21.4 17h-39a22 22 0 0 1-21.4-17z\\\" fill-opacity=\\\".2\\\"/><g transform=\\\"translate(.5 .5)\\\"><use xlink:href=\\\"#F\\\" fill=\\\"url(#A)\\\"/><use xlink:href=\\\"#F\\\" fill=\\\"url(#B)\\\"/><use xlink:href=\\\"#F\\\" fill=\\\"url(#C)\\\"/><use xlink:href=\\\"#F\\\" fill=\\\"url(#D)\\\"/><use xlink:href=\\\"#F\\\" fill=\\\"url(#E)\\\"/></g><g fill=\\\"none\\\" stroke=\\\"#42ff00\\\" stroke-width=\\\"2\\\"><path d=\\\"M204.5 84.5a23 23 0 0 0 22.2-17h172.6a23 23 0 0 0 22.2 17h39a23 23 0 0 0 22.2-17h35.9l36.9 36.9v640.2l-35.9 35.9H67.5v-680l33-33h42.8a23 23 0 0 0 22.2 17z\\\" stroke-opacity=\\\".97\\\"/><path d=\\\"M312 305.3V68.5m-7.5 236.3V86.2L286 67.5m33.5 237.3V86.2L338 67.5M297.5 305V89.7l-22-22.2m52 237.3v-215l22-22.3M313 399.2v170.6m7.5-170.6v152.9l18.5 18.7m-33.5-171.6v152.9L287 570.8m40.5-171.3v149l22 22.2m-52-171.7v149.5l-22 22.2M209 602c0-17.397 14.103-31.5 31.5-31.5h140c17.397 0 31.5 14.103 31.5 31.5s-14.103 31.5-31.5 31.5h-140c-17.397 0-31.5-14.103-31.5-31.5zm276.3-260.7v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm-353-19v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm353 237v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm-353-19v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14z\\\" stroke-opacity=\\\".97\\\"/></g><path d=\\\"M225.2 720.3v21h4.1v-9.1h3.6c1.2 0 1.9 1.3 1.9 4v5.1h3.8v-6.6c0-2.4-1-3.4-2.7-4 1.9-.8 2.6-2.5 2.6-4.6 0-4.1-1.4-5.8-4.7-5.8zm4.1 2.6h3.6c1.2 0 1.9 1.3 1.9 3.4s-.7 3.3-1.9 3.3h-3.6zm13.9-2.6v21h12.9v-2.6h-8.8V732h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.5 0v21h9.4c2.4 0 4-2.5 4-5.7v-9.5c0-3.3-1.7-5.8-4-5.8zm4 2.6h3.7c1.1 0 1.8 1.5 1.8 3.2v9.5c0 1.6-.7 3.1-1.8 3.1h-3.7zm13.9-2.6v21h12.9v-2.6h-8.8V732h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.7 0v21h12.9v-2.6h-8.8V732h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.4 0v21h3.1v-13.2l2.1 13.2h3.1l2.3-13.3v13.3h2.9v-21h-4l-2.7 16-2.7-16zm27.5 21h4l-4.4-21h-5.3l-4.3 21h4.1l.6-4.4h4.6zm-3.2-18.4h.4l1.7 11.4h-3.8zm11-2.6v21h9.8c2.4 0 4-2.6 4-5.9s-.9-4.2-2.1-5c1.2-.9 1.7-2.3 1.7-4.3s-1.6-5.8-4-5.8zm4.1 2.6h3.6c1.2 0 1.9 1.2 1.9 3.3s-.7 3.1-1.9 3.1h-3.6zm0 9h4c1.1 0 1.8 1.5 1.8 3.4s-.7 3.4-1.8 3.4h-4zm13.8-11.6v21h13.4v-2.6H371v-18.4zm18 0v21h12.9v-2.6H389V732h6.4v-2.5H389v-6.6h8.8v-2.6z\\\" fill=\\\"#f2f2f2\\\"/><path d=\\\"M245.6 604.7v7.5H242v-20.1h8.3a8.67 8.67 0 0 1 5.4 1.6 6.11 6.11 0 0 1 1.8 4.7 5.7 5.7 0 0 1-4.1 5.7l4.9 8.1h-4l-4.4-7.5zm0-9.6v6.6h4.3a4.6 4.6 0 0 0 3.1-.8 3.59 3.59 0 0 0 0-5 4.6 4.6 0 0 0-3.1-.8zm26.6 17.1h-3.4c0-.4-.1-.8-.1-1.2a3.7 3.7 0 0 1-.1-1.1 3.89 3.89 0 0 1-1.7 1.9 6.12 6.12 0 0 1-2.9.7 4.51 4.51 0 0 1-3.3-1.2 3.5 3.5 0 0 1-1.3-3 3.7 3.7 0 0 1 1.2-2.9 6.65 6.65 0 0 1 3.8-1.4l4.1-.5v-.7a2.49 2.49 0 0 0-.7-1.9 2.72 2.72 0 0 0-1.9-.7 2.37 2.37 0 0 0-1.8.6 2.3 2.3 0 0 0-.8 1.6H260a4.49 4.49 0 0 1 1.8-3.5 6.35 6.35 0 0 1 4.2-1.3 6 6 0 0 1 4.4 1.4 5.29 5.29 0 0 1 1.5 4.1v7.5zm-9.4-4.1a1.7 1.7 0 0 0 .6 1.4 2.5 2.5 0 0 0 1.6.5 3.68 3.68 0 0 0 2.5-.9 3.22 3.22 0 0 0 1-2.5v-.8l-3.1.3a5.09 5.09 0 0 0-2 .7 1.49 1.49 0 0 0-.6 1.3zm20.2 4.4a5.21 5.21 0 0 1-2.7-.7 4.41 4.41 0 0 1-1.7-1.9v2.3h-3.4v-20.7h3.5v8.7a3.89 3.89 0 0 1 1.7-1.9 4.59 4.59 0 0 1 2.6-.7 5.61 5.61 0 0 1 4.4 2 9.42 9.42 0 0 1 0 10.8 5.4 5.4 0 0 1-4.4 2.1zm-1-12.3a3 3 0 0 0-2.5 1.2 5.68 5.68 0 0 0-.9 3.4v.5a5.92 5.92 0 0 0 .9 3.4 3 3 0 0 0 2.5 1.2 3.39 3.39 0 0 0 2.7-1.3 6.4 6.4 0 0 0 .9-3.6 6.08 6.08 0 0 0-.9-3.5 3.1 3.1 0 0 0-2.7-1.3zm17.4 12.3a5 5 0 0 1-2.7-.7 4.41 4.41 0 0 1-1.7-1.9v2.3h-3.4v-20.7h3.5v8.7a3.89 3.89 0 0 1 1.7-1.9 4.59 4.59 0 0 1 2.6-.7 5.61 5.61 0 0 1 4.4 2 9.42 9.42 0 0 1 0 10.8 5.4 5.4 0 0 1-4.4 2.1zm-1-12.3a3 3 0 0 0-2.5 1.2 5.68 5.68 0 0 0-.9 3.4v.5a5.92 5.92 0 0 0 .9 3.4 3 3 0 0 0 2.5 1.2 3.5 3.5 0 0 0 2.7-1.3 6.4 6.4 0 0 0 .9-3.6 6.08 6.08 0 0 0-.9-3.5 3.21 3.21 0 0 0-2.7-1.3zm13.2-4.7h-3.7V592h3.7zm-.2 16.7H308v-14.3h3.4zm9-2.7h.9l.9-.2v2.8l-1.4.3h-1.4a4.41 4.41 0 0 1-3.2-1 4.21 4.21 0 0 1-1.1-3.1v-7.8h-1.9v-2.6h1.9v-3.6h3.5v3.6h3.3v2.6h-3.3v7.2a2 2 0 0 0 .4 1.4 1.82 1.82 0 0 0 1.4.4zm7.9 2.7h-3.6v-20.1h3.6v8.4h10v-8.4h3.5v20.1h-3.5v-8.7h-10zm23.1-14.6a6.48 6.48 0 0 1 5 2 8.77 8.77 0 0 1 0 10.9 6.69 6.69 0 0 1-5 2 6.89 6.89 0 0 1-5.1-2 8.77 8.77 0 0 1 0-10.9 6.63 6.63 0 0 1 5.1-2zm0 2.6a3.22 3.22 0 0 0-2.6 1.3 5.77 5.77 0 0 0-.9 3.5 6.4 6.4 0 0 0 .9 3.6 3.1 3.1 0 0 0 2.6 1.2 2.9 2.9 0 0 0 2.5-1.2 5.68 5.68 0 0 0 1-3.6 5.4 5.4 0 0 0-1-3.5 3 3 0 0 0-2.5-1.3zm12.9-8.7v20.7h-3.5v-20.7zm12.5 16.2h3.2a5.19 5.19 0 0 1-2.2 3.5 6.07 6.07 0 0 1-4.1 1.3 6.88 6.88 0 0 1-5-2 8.77 8.77 0 0 1 0-10.9 6.69 6.69 0 0 1 5-2 5.49 5.49 0 0 1 4.6 2 7.29 7.29 0 0 1 1.7 5.2v1.1h-9.9a4.62 4.62 0 0 0 1.1 2.9 3.32 3.32 0 0 0 2.5 1.1 2.9 2.9 0 0 0 1.9-.6 3.41 3.41 0 0 0 1.2-1.6zm-3.1-7.5a3 3 0 0 0-2.3.9 4.55 4.55 0 0 0-1.2 2.5h6.5a3.61 3.61 0 0 0-.8-2.4 2.7 2.7 0 0 0-2.2-1zm121.1-431.6c12.565-4.904 20.136-17.775 18.317-31.14s-12.555-23.744-25.973-25.112-26.027 6.634-30.504 19.357.343 26.857 11.661 34.194a3.2 3.2 0 0 1 2.8-1.7c.2 0 .5-.3.4-.5a21.47 21.47 0 0 1-.7-5.1c0-10.7 8.1-19.3 18.1-19.3a1.92 1.92 0 0 0 1.6-1.1v-.2a2.6 2.6 0 0 0-1.6-3.3 18.91 18.91 0 0 1-13.7-14.1.81.81 0 0 1 1.4-.8l26.4 20.1a1.08 1.08 0 0 1 .4.9 18.25 18.25 0 0 0 .1 7.1.79.79 0 0 1-.3.9 8.1 8.1 0 0 1-8.6.5 1.38 1.38 0 0 0-1.1-.2 1.51 1.51 0 0 0-1.1 1.4v12.2a.9.9 0 0 1-.9.9h-1.6a.9.9 0 0 1-.9-.9 8.4 8.4 0 0 0-8.1-7.4h-.8a.6.6 0 1 0 .1 1.2 7.3 7.3 0 0 1 6 7.3 7.52 7.52 0 0 1-.2 1.5.9.9 0 0 0 .68 1.08h7.02a1.21 1.21 0 0 1 .5.5 2.58 2.58 0 0 1 .6 1.72zM467.4 137a.6.6 0 0 1 .4-1.1h16.6c.304-.138.662-.004.8.3s.004.662-.3.8a14.56 14.56 0 0 1-8.8 3.1 14 14 0 0 1-8.7-3.1zm31.5 5.3a1.6 1.6 0 0 1-3.197-.131 1.6 1.6 0 0 1 1.597-1.569 1.7 1.7 0 0 1 1.6 1.7z\\\" fill=\\\"#dae0ff\\\"/><text alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" transform=\\\"translate(311 370.9)\\\" font-size=\\\"44\\\" fill=\\\"#fff\\\" font-family=\\\"ArialMT, Arial\\\">';\\n    string private constant PURPLE_SVG = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"623\\\" height=\\\"848\\\" xmlns:v=\\\"https://vecta.io/nano\\\"><defs><radialGradient id=\\\"A\\\" cx=\\\"18.03\\\" cy=\\\"-23.85\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(-778.44 0 0 -755.59 14341.92 -17655.24)\\\" xlink:href=\\\"#G\\\"><stop offset=\\\".01\\\" stop-color=\\\"#de80ff\\\" stop-opacity=\\\".39\\\"/><stop offset=\\\".14\\\" stop-color=\\\"#ec7bff\\\" stop-opacity=\\\".22\\\"/><stop offset=\\\".27\\\" stop-color=\\\"#f25aff\\\" stop-opacity=\\\".48\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"B\\\" cx=\\\"17.91\\\" cy=\\\"-23.86\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(8,333,-579.59,13.92,-13669.05,-5581.04)\\\" xlink:href=\\\"#G\\\"><stop offset=\\\"0\\\" stop-color=\\\"#8f00ff\\\" stop-opacity=\\\".51\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"C\\\" cx=\\\"18.09\\\" cy=\\\"-23.91\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(0,-345,877.77,0,21305.27,7045.5)\\\" xlink:href=\\\"#G\\\"><stop offset=\\\"0\\\" stop-color=\\\"#c13fff\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"D\\\" cx=\\\"17.93\\\" cy=\\\"-23.91\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(268,-2,8.57,1148.65,-4548.99,27879.6)\\\" xlink:href=\\\"#G\\\"><stop offset=\\\"0\\\" stop-color=\\\"#b946ff\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"E\\\" cx=\\\"18.07\\\" cy=\\\"-23.87\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(-242,0,0,-1277.43,4934.5,-30115.86)\\\" xlink:href=\\\"#G\\\"><stop offset=\\\"0\\\" stop-color=\\\"#dd0fff\\\" stop-opacity=\\\".91\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/></radialGradient><path id=\\\"F\\\" d=\\\"M399.6 66H225.4A22 22 0 0 1 204 83h-39a22 22 0 0 1-21.4-17h-44L66 99.6V781h453.5l36.5-36.5v-641L518.5 66h-37.1A22 22 0 0 1 460 83h-39a22 22 0 0 1-21.4-17Z\\\"/><linearGradient id=\\\"G\\\" gradientUnits=\\\"userSpaceOnUse\\\"/></defs><path d=\\\"M.5.5h622v847H.5z\\\" stroke=\\\"#000\\\" stroke-miterlimit=\\\"10\\\"/><g fill-rule=\\\"evenodd\\\"><path d=\\\"M400 66.5H225.8a22 22 0 0 1-21.4 17h-39a22 22 0 0 1-21.4-17h-44l-33.6 33.6v681.4h453.5l36.5-36.5V104l-37.5-37.5h-37.1a22 22 0 0 1-21.4 17h-39a22 22 0 0 1-21.4-17z\\\" fill=\\\"#0c0b0f\\\" fill-opacity=\\\".26\\\"/><g transform=\\\"translate(.4 .5)\\\"><use xlink:href=\\\"#F\\\" fill-opacity=\\\".99\\\" fill=\\\"url(#A)\\\"/><use xlink:href=\\\"#F\\\" fill-opacity=\\\".5\\\" fill=\\\"url(#B)\\\"/><use xlink:href=\\\"#F\\\" fill-opacity=\\\".5\\\" fill=\\\"url(#C)\\\"/><use xlink:href=\\\"#F\\\" fill-opacity=\\\".5\\\" fill=\\\"url(#D)\\\"/><use xlink:href=\\\"#F\\\" fill-opacity=\\\".5\\\" fill=\\\"url(#E)\\\"/></g></g><g fill=\\\"none\\\" stroke=\\\"#ad86ff\\\" stroke-width=\\\"2\\\"><path d=\\\"M204.4 84.5a23 23 0 0 0 22.2-17h172.6a23 23 0 0 0 22.2 17h39a23 23 0 0 0 22.2-17h35.9l36.9 36.9v640.2l-35.9 35.9H67.4v-680l33-33h42.8a23 23 0 0 0 22.2 17z\\\"/><path d=\\\"M311.9 305.3V68.5m-7.5 236.3V86.2l-18.5-18.7m33.5 237.3V86.2l18.5-18.7M297.4 305V89.7l-22-22.2m52 237.3v-215l22-22.3m-36.5 331.7v170.6m7.5-170.6v152.9l18.5 18.7m-33.5-171.6v152.9l-18.5 18.7m40.5-171.3v149l22 22.2m-52-171.7v149.5l-22 22.2M208.9 602c0-17.397 14.103-31.5 31.5-31.5h140c17.397 0 31.5 14.103 31.5 31.5s-14.103 31.5-31.5 31.5h-140c-17.397 0-31.5-14.103-31.5-31.5zm276.8-260.7v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm-353-19v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm353 237v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14zm-353-19v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14z\\\"/></g><path d=\\\"M242.7 714.5v21h4v-9.1h3.6c1.3 0 1.9 1.3 1.9 4v5.1h3.9v-6.6a3.7 3.7 0 0 0-2.8-4c2-.8 2.7-2.5 2.7-4.6 0-4.1-1.5-5.8-4.7-5.8zm4 2.6h3.7c1.2 0 1.9 1.3 1.9 3.4s-.7 3.3-1.9 3.3h-3.7zm14-2.6v21h12.8v-2.6h-8.7v-6.7h6.4v-2.5h-6.4v-6.6h8.7v-2.6zm17.4 0v21h9.5c2.4 0 3.9-2.5 3.9-5.7v-9.5c0-3.3-1.6-5.8-3.9-5.8zm4.1 2.6h3.7c1.1 0 1.8 1.5 1.8 3.2v9.5c0 1.6-.7 3.1-1.8 3.1h-3.7zm13.9-2.6v21H309v-2.6h-8.8v-6.7h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.7 0v21h12.9v-2.6h-8.8v-6.7h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.4 0v21h3v-13.2l2.1 13.2h3.2l2.3-13.3v13.3h2.9v-21h-4l-2.7 16-2.8-16zm18 0v21h12.9v-2.6h-8.8v-6.7h6.4v-2.5h-6.4v-6.6h8.8v-2.6zm17.5 0v21h9.4c2.4 0 4-2.5 4-5.7v-9.5c0-3.3-1.6-5.8-4-5.8zm4 2.6h3.7c1.2 0 1.9 1.5 1.9 3.2v9.5c0 1.6-.7 3.1-1.9 3.1h-3.7zM245.5 604.7v7.5h-3.6v-20.1h8.3a8.67 8.67 0 0 1 5.4 1.6 6.11 6.11 0 0 1 1.8 4.7 5.7 5.7 0 0 1-4.1 5.7l4.9 8.1h-4l-4.4-7.5zm0-9.6v6.6h4.3a4.6 4.6 0 0 0 3.1-.8 3.59 3.59 0 0 0 0-5 4.6 4.6 0 0 0-3.1-.8zm26.6 17.1h-3.4c0-.4-.1-.8-.1-1.2a3.7 3.7 0 0 1-.1-1.1 3.89 3.89 0 0 1-1.7 1.9 6.12 6.12 0 0 1-2.9.7 4.51 4.51 0 0 1-3.3-1.2 3.5 3.5 0 0 1-1.3-3 3.7 3.7 0 0 1 1.2-2.9 6.65 6.65 0 0 1 3.8-1.4l4.1-.5v-.7a2.49 2.49 0 0 0-.7-1.9 2.72 2.72 0 0 0-1.9-.7 2.37 2.37 0 0 0-1.8.6 2.3 2.3 0 0 0-.8 1.6h-3.3a4.49 4.49 0 0 1 1.8-3.5 6.35 6.35 0 0 1 4.2-1.3 6 6 0 0 1 4.4 1.4 5.29 5.29 0 0 1 1.5 4.1v7.5zm-9.4-4.1a1.7 1.7 0 0 0 .6 1.4 2.5 2.5 0 0 0 1.6.5 3.68 3.68 0 0 0 2.5-.9 3.22 3.22 0 0 0 1-2.5v-.8l-3.1.3a5.09 5.09 0 0 0-2 .7 1.49 1.49 0 0 0-.6 1.3zm20.2 4.4a5.21 5.21 0 0 1-2.7-.7 4.41 4.41 0 0 1-1.7-1.9v2.3h-3.4v-20.7h3.5v8.7a3.89 3.89 0 0 1 1.7-1.9 4.59 4.59 0 0 1 2.6-.7 5.61 5.61 0 0 1 4.4 2 9.42 9.42 0 0 1 0 10.8 5.4 5.4 0 0 1-4.4 2.1zm-1-12.3a3 3 0 0 0-2.5 1.2 5.68 5.68 0 0 0-.9 3.4v.5a5.92 5.92 0 0 0 .9 3.4 3 3 0 0 0 2.5 1.2 3.39 3.39 0 0 0 2.7-1.3 6.4 6.4 0 0 0 .9-3.6 6.08 6.08 0 0 0-.9-3.5 3.1 3.1 0 0 0-2.7-1.3zm17.4 12.3a5 5 0 0 1-2.7-.7 4.41 4.41 0 0 1-1.7-1.9v2.3h-3.4v-20.7h3.5v8.7a3.89 3.89 0 0 1 1.7-1.9 4.59 4.59 0 0 1 2.6-.7 5.61 5.61 0 0 1 4.4 2 9.42 9.42 0 0 1 0 10.8 5.4 5.4 0 0 1-4.4 2.1zm-1-12.3a3 3 0 0 0-2.5 1.2 5.68 5.68 0 0 0-.9 3.4v.5a5.92 5.92 0 0 0 .9 3.4 3 3 0 0 0 2.5 1.2 3.5 3.5 0 0 0 2.7-1.3 6.4 6.4 0 0 0 .9-3.6 6.08 6.08 0 0 0-.9-3.5 3.21 3.21 0 0 0-2.7-1.3zm13.2-4.7h-3.7V592h3.7zm-.2 16.7h-3.4v-14.3h3.4zm9-2.7h.9l.9-.2v2.8l-1.4.3h-1.4a4.41 4.41 0 0 1-3.2-1 4.21 4.21 0 0 1-1.1-3.1v-7.8h-1.9v-2.6h1.9v-3.6h3.5v3.6h3.3v2.6h-3.3v7.2a2 2 0 0 0 .4 1.4 1.82 1.82 0 0 0 1.4.4zm7.9 2.7h-3.6v-20.1h3.6v8.4h10v-8.4h3.5v20.1h-3.5v-8.7h-10zm23.1-14.6a6.48 6.48 0 0 1 5 2 8.77 8.77 0 0 1 0 10.9 6.69 6.69 0 0 1-5 2 6.89 6.89 0 0 1-5.1-2 8.77 8.77 0 0 1 0-10.9 6.63 6.63 0 0 1 5.1-2zm0 2.6a3.22 3.22 0 0 0-2.6 1.3 5.77 5.77 0 0 0-.9 3.5 6.4 6.4 0 0 0 .9 3.6 3.1 3.1 0 0 0 2.6 1.2 2.9 2.9 0 0 0 2.5-1.2 5.68 5.68 0 0 0 1-3.6 5.4 5.4 0 0 0-1-3.5 3 3 0 0 0-2.5-1.3zm12.9-8.7v20.7h-3.5v-20.7zm12.5 16.2h3.2a5.19 5.19 0 0 1-2.2 3.5 6.07 6.07 0 0 1-4.1 1.3 6.88 6.88 0 0 1-5-2 8.77 8.77 0 0 1 0-10.9 6.69 6.69 0 0 1 5-2 5.49 5.49 0 0 1 4.6 2 7.29 7.29 0 0 1 1.7 5.2v1.1H370a4.62 4.62 0 0 0 1.1 2.9 3.32 3.32 0 0 0 2.5 1.1 2.9 2.9 0 0 0 1.9-.6 3.41 3.41 0 0 0 1.2-1.6zm-3.1-7.5a3 3 0 0 0-2.3.9 4.55 4.55 0 0 0-1.2 2.5h6.5a3.61 3.61 0 0 0-.8-2.4 2.7 2.7 0 0 0-2.2-1zm121.1-431.6c12.565-4.904 20.136-17.775 18.317-31.14s-12.555-23.744-25.973-25.112-26.027 6.634-30.504 19.357.343 26.857 11.661 34.194a3.2 3.2 0 0 1 2.8-1.7c.2 0 .5-.3.4-.5a21.47 21.47 0 0 1-.7-5.1c0-10.7 8.1-19.3 18.1-19.3a1.92 1.92 0 0 0 1.6-1.1v-.2a2.6 2.6 0 0 0-1.6-3.3 18.91 18.91 0 0 1-13.7-14.1.81.81 0 0 1 1.4-.8l26.4 20.1a1.08 1.08 0 0 1 .4.9 18.25 18.25 0 0 0 .1 7.1.79.79 0 0 1-.3.9 8.1 8.1 0 0 1-8.6.5 1.38 1.38 0 0 0-1.1-.2 1.51 1.51 0 0 0-1.1 1.4v12.2a.9.9 0 0 1-.9.9h-1.6a.9.9 0 0 1-.9-.9 8.4 8.4 0 0 0-8.1-7.4h-.8a.6.6 0 1 0 .1 1.2 7.3 7.3 0 0 1 6 7.3 7.52 7.52 0 0 1-.2 1.5.9.9 0 0 0 .68 1.08h7.02a1.21 1.21 0 0 1 .5.5 2.58 2.58 0 0 1 .6 1.72zM467.3 137a.6.6 0 0 1 .4-1.1h16.6c.304-.138.662-.004.8.3s.004.662-.3.8a14.56 14.56 0 0 1-8.8 3.1 14 14 0 0 1-8.7-3.1zm31.5 5.3a1.6 1.6 0 0 1-3.197-.131 1.6 1.6 0 0 1 1.597-1.569 1.7 1.7 0 0 1 1.6 1.7z\\\" fill=\\\"#dae0ff\\\"/><text alignment-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" transform=\\\"translate(311 370.9)\\\" font-size=\\\"44\\\" fill=\\\"#fff\\\" font-family=\\\"ArialMT, Arial\\\">';\\n\\n    /// @dev generates the tokenURI for a given ERC-721 token ID\\n    /// @param tokenId_ The token id to generate the URI for\\n    /// @param questId_ The questId tied to the tokenId\\n    /// @param totalParticipants_ The total number of participants in the quest\\n    /// @param claimed_ Whether or not the token has been claimed\\n    /// @param rewardAmount_ The amount of reward tokens that the user is eligible for\\n    /// @param rewardAddress_ The address of the reward token\\n    /// @return encoded JSON following the generic OpenSea metadata standard\\n    function generateTokenURI(\\n        uint tokenId_,\\n        string memory questId_,\\n        uint totalParticipants_,\\n        bool claimed_,\\n        uint rewardAmount_,\\n        address rewardAddress_\\n    ) external view virtual returns (string memory) {\\n        bytes memory dataURI = generateDataURI(\\n            tokenId_,\\n            questId_,\\n            totalParticipants_,\\n            claimed_,\\n            rewardAmount_,\\n            rewardAddress_\\n        );\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(dataURI)));\\n    }\\n\\n    function generateDataURI(\\n        uint tokenId_,\\n        string memory questId_,\\n        uint totalParticipants_,\\n        bool claimed_,\\n        uint rewardAmount_,\\n        address rewardAddress_\\n    ) internal view virtual returns (bytes memory) {\\n        string memory tokenIdString = tokenId_.toString();\\n        string memory humanRewardAmountString = this.humanRewardAmount(rewardAmount_, rewardAddress_);\\n        string memory rewardTokenSymbol = this.symbolForAddress(rewardAddress_);\\n\\n        bytes memory attributes = abi.encodePacked(\\n            '[',\\n            generateAttribute('Quest ID', questId_),\\n            ',',\\n            generateAttribute('Token ID', tokenIdString),\\n            ',',\\n            generateAttribute('Total Participants', totalParticipants_.toString()),\\n            ',',\\n            generateAttribute('Claimed', claimed_ ? 'true' : 'false'),\\n            ',',\\n            generateAttribute('Reward Amount', humanRewardAmountString),\\n            ',',\\n            generateAttribute('Reward Address', Strings.toHexString(uint160(rewardAddress_), 20)),\\n            ']'\\n        );\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n            '\\\"name\\\": \\\"RabbitHole.gg Receipt #',\\n            tokenIdString,\\n            '\\\",',\\n            '\\\"description\\\": \\\"RabbitHole.gg Receipts are used to claim rewards from completed quests.\\\",',\\n            '\\\"image\\\": \\\"',\\n            generateSVG(claimed_, humanRewardAmountString, rewardTokenSymbol),\\n            '\\\",',\\n            '\\\"attributes\\\": ',\\n            attributes,\\n            '}'\\n        );\\n        return dataURI;\\n    }\\n\\n    /// @dev generates an attribute object for an ERC-721 token\\n    /// @param key The key for the attribute\\n    /// @param value The value for the attribute\\n    function generateAttribute(string memory key, string memory value) internal pure returns (string memory) {\\n        bytes memory attribute = abi.encodePacked(\\n            '{',\\n            '\\\"trait_type\\\": \\\"',\\n            key,\\n            '\\\",',\\n            '\\\"value\\\": \\\"',\\n            value,\\n            '\\\"',\\n            '}'\\n        );\\n        return string(attribute);\\n    }\\n\\n    /// @dev generates the on-chain SVG for an ERC-721 token ID\\n    /// @param claimed_ Whether or not the token has been claimed\\n    /// @param rewardAmountString_ The string decimal of reward tokens that the user is eligible for\\n    /// @param rewardTokenSymbol_ The symbol of the reward token\\n    /// @return base64 encoded SVG image\\n    function generateSVG(bool claimed_, string memory rewardAmountString_, string memory rewardTokenSymbol_) internal pure returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            claimed_ ? PURPLE_SVG : GREEN_SVG,\\n            rewardAmountString_,\\n            ' ',\\n            rewardTokenSymbol_,\\n            '</text></svg>'\\n        );\\n        return string(abi.encodePacked('data:image/svg+xml;base64,', Base64.encode(svg)));\\n    }\\n\\n    /// @dev Returns a human readable reward amount\\n    /// @param rewardAmount_ The reward amount\\n    /// @param rewardAddress_ The reward address\\n    function humanRewardAmount(uint rewardAmount_, address rewardAddress_) external view returns (string memory) {\\n        uint8 decimals;\\n\\n        if (rewardAddress_ == address(0)) {\\n            decimals = 18;\\n        } else {\\n            decimals = ERC20(rewardAddress_).decimals();\\n        }\\n\\n        return decimalString(rewardAmount_, decimals, false);\\n    }\\n\\n    /// @dev Returns the symbol for a token address\\n    /// @param tokenAddress_ The reward address\\n    function symbolForAddress(address tokenAddress_) external view returns (string memory) {\\n        string memory symbol;\\n\\n        if (tokenAddress_ == address(0)) {\\n            symbol = 'ETH';\\n        } else {\\n            symbol = ERC20(tokenAddress_).symbol();\\n        }\\n\\n        return symbol;\\n    }\\n\\n    /// @notice From https://gist.github.com/wilsoncusack/d2e680e0f961e36393d1bf0b6faafba7\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function decimalString(uint256 number, uint8 decimals, bool isPercent) internal pure returns (string memory){\\n        uint8 percentBufferOffset = isPercent ? 1 : 0;\\n        uint256 tenPowDecimals = 10 ** decimals;\\n        uint256 temp = number;\\n        uint8 digits;\\n        uint8 numSigfigs;\\n        while (temp != 0) {\\n            if (numSigfigs > 0) {\\n                // count all digits preceding least significant figure\\n                numSigfigs++;\\n            } else if (temp % 10 != 0) {\\n                numSigfigs++;\\n            }\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        DecimalStringParams memory params;\\n        params.isPercent = isPercent;\\n        if ((digits - numSigfigs) >= decimals) {\\n            // no decimals, ensure we preserve all trailing zeros\\n            params.sigfigs = number / tenPowDecimals;\\n            params.sigfigIndex = digits - decimals;\\n            params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        } else {\\n            // chop all trailing zeros for numbers with decimals\\n            params.sigfigs = number / (10 ** (digits - numSigfigs));\\n            if (tenPowDecimals > number) {\\n                // number is less tahn one\\n                // in this case, there may be leading zeros after the decimal place\\n                // that need to be added\\n\\n                // offset leading zeros by two to account for leading '0.'\\n                params.zerosStartIndex = 2;\\n                params.zerosEndIndex = decimals - digits + 2;\\n                params.sigfigIndex = numSigfigs + params.zerosEndIndex;\\n                params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n                params.isLessThanOne = true;\\n            } else {\\n                // In this case, there are digits before and\\n                // after the decimal place\\n                params.sigfigIndex = numSigfigs + 1;\\n                params.decimalIndex = digits - decimals + 1;\\n            }\\n        }\\n        params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        return generateDecimalString(params);\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = '%';\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = '0';\\n            buffer[1] = '.';\\n        }\\n\\n        // add leading/trailing 0's\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex; zerosCursor++) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n                buffer[--params.sigfigIndex] = '.';\\n            }\\n            buffer[--params.sigfigIndex] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0xb297b40966cb2b307c24943506f3b9a1e3c9d11bbdf033e3b9c46dc52d56606f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "RabbitHole.gg",
    "details": "This contract is used to render on-chain data for RabbitHole Receipts (ERC-721 standard)",
    "kind": "dev",
    "methods": {
      "generateTokenURI(uint256,string,uint256,bool,uint256,address)": {
        "details": "generates the tokenURI for a given ERC-721 token ID",
        "params": {
          "claimed_": "Whether or not the token has been claimed",
          "questId_": "The questId tied to the tokenId",
          "rewardAddress_": "The address of the reward token",
          "rewardAmount_": "The amount of reward tokens that the user is eligible for",
          "tokenId_": "The token id to generate the URI for",
          "totalParticipants_": "The total number of participants in the quest"
        },
        "returns": {
          "_0": "encoded JSON following the generic OpenSea metadata standard"
        }
      },
      "humanRewardAmount(uint256,address)": {
        "details": "Returns a human readable reward amount",
        "params": {
          "rewardAddress_": "The reward address",
          "rewardAmount_": "The reward amount"
        }
      },
      "symbolForAddress(address)": {
        "details": "Returns the symbol for a token address",
        "params": {
          "tokenAddress_": "The reward address"
        }
      }
    },
    "title": "ReceiptRenderer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}