{
  "address": "0x4d6C349BE46F7904E1E1aE89DBedAe35E54945AF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbe8ce283a162ade05e2476fc1224a168741bd1fe9d8a875e524643699f82f6f",
  "receipt": {
    "to": null,
    "from": "0x017F8Ad14A2E745ea0F756Bd57CD4852400be78c",
    "contractAddress": "0x4d6C349BE46F7904E1E1aE89DBedAe35E54945AF",
    "transactionIndex": 1,
    "gasUsed": "627680",
    "logsBloom": "0x
    "blockHash": "0xf8cdeafbea965b95e70803e6d146e3b1e0f7a69d07aebbb1a1e55206fe4e758e",
    "transactionHash": "0xfbe8ce283a162ade05e2476fc1224a168741bd1fe9d8a875e524643699f82f6f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 40056074,
        "transactionHash": "0xfbe8ce283a162ade05e2476fc1224a168741bd1fe9d8a875e524643699f82f6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000017f8ad14a2e745ea0f756bd57cd4852400be78c",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000398f62d58c05d60000000000000000000000000000000000000000000000001b5e96c2fc387d02500000000000000000000000000000000000000000001e93ef096aef0b12787b4000000000000000000000000000000000000000000000001b25076026ac772c500000000000000000000000000000000000000000001e93ef42fa51e09e7e514",
        "logIndex": 10,
        "blockHash": "0xf8cdeafbea965b95e70803e6d146e3b1e0f7a69d07aebbb1a1e55206fe4e758e"
      }
    ],
    "blockNumber": 40056074,
    "cumulativeGasUsed": "971256",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b3264e2ea64b2880e837019ad0a8060d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"RabbitHole.gg\",\"details\":\"This contract is used to render on-chain data for RabbitHole tickets (aka an 1155 Reward)\",\"kind\":\"dev\",\"methods\":{\"generateTokenURI(uint256)\":{\"details\":\"generates the tokenURI for a given 1155 token ID\",\"params\":{\"tokenId_\":\"The token id to generate the URI for\"},\"returns\":{\"_0\":\"encoded JSON following the generic OpenSea metadata standard\"}}},\"title\":\"TicketRenderer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicketRenderer.sol\":\"TicketRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TicketRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @title TicketRenderer\\n/// @author RabbitHole.gg\\n/// @dev This contract is used to render on-chain data for RabbitHole tickets (aka an 1155 Reward)\\ncontract TicketRenderer {\\n    using Strings for uint256;\\n\\n    /// @dev generates the tokenURI for a given 1155 token ID\\n    /// @param tokenId_ The token id to generate the URI for\\n    /// @return encoded JSON following the generic OpenSea metadata standard\\n    function generateTokenURI(\\n        uint tokenId_\\n    ) external pure returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n            '\\\"name\\\": \\\"RabbitHole Tickets #',\\n            tokenId_.toString(),\\n            '\\\",',\\n            '\\\"description\\\": \\\"A reward for completing quests within RabbitHole, with unk(no)wn utility\\\",',\\n            '\\\"image\\\": \\\"',\\n            generateSVG(tokenId_),\\n            '\\\"',\\n            '}'\\n        );\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(dataURI)));\\n    }\\n\\n    /// @dev generates the on-chain SVG for an 1155 token ID\\n    /// @param tokenId_ The token id to generate the svg for\\n    /// @return encoded JSON for an SVG image\\n    function generateSVG(uint tokenId_) internal pure returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\">',\\n            '<style>.base { fill: white; font-family: serif; font-size: 14px; }</style>',\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" />',\\n            '<text x=\\\"50%\\\" y=\\\"40%\\\" class=\\\"base\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\">RabbitHole Tickets #',\\n            tokenId_.toString(),\\n            '</text>',\\n            '</svg>'\\n        );\\n        return string(abi.encodePacked('data:image/svg+xml;base64,', Base64.encode(svg)));\\n    }\\n}\",\"keccak256\":\"0xd67914ffbc2a6bc74a90ae7ef772bf7269cda16c5cfefda88f1b263c6e5c16d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a7b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063210fa96b14610030575b600080fd5b61004361003e3660046103fc565b610059565b6040516100509190610439565b60405180910390f35b60606000610066836100c1565b61006f8461017f565b6040516020016100809291906104a6565b604051602081830303815290604052905061009a816101c6565b6040516020016100aa9190610636565b604051602081830303815290604052915050919050565b606060006100ce83610319565b600101905060008167ffffffffffffffff8111156100ee576100ee61067b565b6040519080825280601f01601f191660200182016040528015610118576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461012257509392505050565b6060600061018c836100c1565b60405160200161019c91906106aa565b60405160208183030381529060405290506101b6816101c6565b6040516020016100aa9190610906565b606081516000036101e557505060408051602081019091526000815290565b6000604051806060016040528060408152602001610a066040913990506000600384516002610214919061097a565b61021e919061098d565b6102299060046109c8565b67ffffffffffffffff8111156102415761024161067b565b6040519080825280601f01601f19166020018201604052801561026b576020820181803683370190505b509050600182016020820185865187015b808210156102d7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061027c565b50506003865106600181146102f357600281146103065761030e565b603d6001830353603d600283035361030e565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610362577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061038e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106103ac57662386f26fc10000830492506010015b6305f5e10083106103c4576305f5e100830492506008015b61271083106103d857612710830492506004015b606483106103ea576064830492506002015b600a83106103f6576001015b92915050565b60006020828403121561040e57600080fd5b5035919050565b60005b83811015610430578181015183820152602001610418565b50506000910152565b6020815260008251806020840152610458816040850160208701610415565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000815161049c818560208601610415565b9290920192915050565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022526162626974486f6c65205469636b657473202300000060018201526000835161050481601e850160208801610415565b80830190507f222c000000000000000000000000000000000000000000000000000000000000601e8201527f226465736372697074696f6e223a2022412072657761726420666f7220636f6d60208201527f706c6574696e67207175657374732077697468696e20526162626974486f6c6560408201527f2c207769746820756e6b286e6f29776e207574696c697479222c00000000000060608201527f22696d616765223a202200000000000000000000000000000000000000000000607a82015283516105da816084840160208801610415565b7f2200000000000000000000000000000000000000000000000000000000000000608492909101918201527f7d000000000000000000000000000000000000000000000000000000000000006085820152608601949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161066e81601d850160208701610415565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d22302030203335302033353060408201527f223e00000000000000000000000000000000000000000000000000000000000060608201527f3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e7460628201527f2d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b60828201527f207d3c2f7374796c653e0000000000000000000000000000000000000000000060a28201527f3c726563742077696474683d223130302522206865696768743d22313030252260ac8201527f2066696c6c3d22626c61636b22202f3e0000000000000000000000000000000060cc8201527f3c7465787420783d223530252220793d223430252220636c6173733d2262617360dc8201527f652220646f6d696e616e742d626173656c696e653d226d6964646c652220746560fc8201527f78742d616e63686f723d226d6964646c65223e526162626974486f6c6520546961011c8201527f636b65747320230000000000000000000000000000000000000000000000000061013c82015260006108ff6108d66108ad61014385018661048a565b7f3c2f746578743e00000000000000000000000000000000000000000000000000815260070190565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815260060190565b9392505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161093e81601a850160208701610415565b91909101601a0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103f6576103f661094b565b6000826109c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a0057610a0061094b565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122093c13748f82af248cdf26feb1cef3c1ce8fe5f9a3503a3efb7799257f9783dae64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063210fa96b14610030575b600080fd5b61004361003e3660046103fc565b610059565b6040516100509190610439565b60405180910390f35b60606000610066836100c1565b61006f8461017f565b6040516020016100809291906104a6565b604051602081830303815290604052905061009a816101c6565b6040516020016100aa9190610636565b604051602081830303815290604052915050919050565b606060006100ce83610319565b600101905060008167ffffffffffffffff8111156100ee576100ee61067b565b6040519080825280601f01601f191660200182016040528015610118576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461012257509392505050565b6060600061018c836100c1565b60405160200161019c91906106aa565b60405160208183030381529060405290506101b6816101c6565b6040516020016100aa9190610906565b606081516000036101e557505060408051602081019091526000815290565b6000604051806060016040528060408152602001610a066040913990506000600384516002610214919061097a565b61021e919061098d565b6102299060046109c8565b67ffffffffffffffff8111156102415761024161067b565b6040519080825280601f01601f19166020018201604052801561026b576020820181803683370190505b509050600182016020820185865187015b808210156102d7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061027c565b50506003865106600181146102f357600281146103065761030e565b603d6001830353603d600283035361030e565b603d60018303535b509195945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610362577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061038e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106103ac57662386f26fc10000830492506010015b6305f5e10083106103c4576305f5e100830492506008015b61271083106103d857612710830492506004015b606483106103ea576064830492506002015b600a83106103f6576001015b92915050565b60006020828403121561040e57600080fd5b5035919050565b60005b83811015610430578181015183820152602001610418565b50506000910152565b6020815260008251806020840152610458816040850160208701610415565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000815161049c818560208601610415565b9290920192915050565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022526162626974486f6c65205469636b657473202300000060018201526000835161050481601e850160208801610415565b80830190507f222c000000000000000000000000000000000000000000000000000000000000601e8201527f226465736372697074696f6e223a2022412072657761726420666f7220636f6d60208201527f706c6574696e67207175657374732077697468696e20526162626974486f6c6560408201527f2c207769746820756e6b286e6f29776e207574696c697479222c00000000000060608201527f22696d616765223a202200000000000000000000000000000000000000000000607a82015283516105da816084840160208801610415565b7f2200000000000000000000000000000000000000000000000000000000000000608492909101918201527f7d000000000000000000000000000000000000000000000000000000000000006085820152608601949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161066e81601d850160208701610415565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f73766722207072657365727665417370656374526174696f3d22784d6960208201527f6e594d696e206d656574222076696577426f783d22302030203335302033353060408201527f223e00000000000000000000000000000000000000000000000000000000000060608201527f3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e7460628201527f2d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b60828201527f207d3c2f7374796c653e0000000000000000000000000000000000000000000060a28201527f3c726563742077696474683d223130302522206865696768743d22313030252260ac8201527f2066696c6c3d22626c61636b22202f3e0000000000000000000000000000000060cc8201527f3c7465787420783d223530252220793d223430252220636c6173733d2262617360dc8201527f652220646f6d696e616e742d626173656c696e653d226d6964646c652220746560fc8201527f78742d616e63686f723d226d6964646c65223e526162626974486f6c6520546961011c8201527f636b65747320230000000000000000000000000000000000000000000000000061013c82015260006108ff6108d66108ad61014385018661048a565b7f3c2f746578743e00000000000000000000000000000000000000000000000000815260070190565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815260060190565b9392505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161093e81601a850160208701610415565b91909101601a0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103f6576103f661094b565b6000826109c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a0057610a0061094b565b50029056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122093c13748f82af248cdf26feb1cef3c1ce8fe5f9a3503a3efb7799257f9783dae64736f6c63430008100033",
  "devdoc": {
    "author": "RabbitHole.gg",
    "details": "This contract is used to render on-chain data for RabbitHole tickets (aka an 1155 Reward)",
    "kind": "dev",
    "methods": {
      "generateTokenURI(uint256)": {
        "details": "generates the tokenURI for a given 1155 token ID",
        "params": {
          "tokenId_": "The token id to generate the URI for"
        },
        "returns": {
          "_0": "encoded JSON following the generic OpenSea metadata standard"
        }
      }
    },
    "title": "TicketRenderer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}